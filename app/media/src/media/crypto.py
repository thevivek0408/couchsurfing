from nacl.bindings.crypto_generichash import generichash_blake2b_salt_personal
from nacl.bindings.utils import sodium_memcmp


def secure_compare(val1, val2):
    return sodium_memcmp(val1, val2)


def generate_hash_signature(message: bytes, key: bytes) -> bytes:
    """
    Computes a blake2b keyed hash for the message.

    This can be used as a fast yet secure symmetric signature: by checking that
    the hashes agree, we can make sure the signature was generated by a party
    with knowledge of the key.
    """
    return generichash_blake2b_salt_personal(message, key=key, digest_size=32)


def verify_hash_signature(message: bytes, key: bytes, sig: bytes) -> bool:
    """
    Verifies a hash signature generated with generate_hash_signature.

    Returns true if the signature matches, otherwise false.
    """
    return secure_compare(sig, generate_hash_signature(message, key))
